a = [1, 9, 8, 12, 7]
b = [21, 7, 84, 2, 14]

# sort() >> list 자체를 정렬한다
# 오름차순
a.sort()
print(a) # [1, 7, 8, 9, 12]
# 내림차순
a.sort(reverse=True)
print(a) # [12, 9, 8, 7, 1]  

# sorted() >> 새로운 객체에 정렬된 값을 넣고, 기존의 리스트는 유지한다
print(b) # [21, 7, 84, 2, 14]
# 오름차순
c = sorted(b)
print(c) # [2, 7, 14, 21, 84]
d = sorted(b, reverse=True)
print(d) # [84, 21, 14, 7, 2]

# sort() > sorted()     >> sort는 복사본을 만들지 않기 때문에 수행속도가 더 빠르다

# key를 활용한 정렬 >> 특정 기준에 따라서 정렬을 수행할 수 있다
# x[0] = 튜플의 첫 번째 값을 기준으로 오름차순으로 정렬
data_list1 = sorted([('가렌', 1), ('아무무', 2), ('질리언', 5), ('레오나', 3)], key = lambda x: x[0])
# x[0] = 튜플의 첫 번째 값을 기준으로 내림차순으로 정렬
data_list2 = sorted([('가렌', 1), ('아무무', 2), ('질리언', 5), ('레오나', 3)], key = lambda x: x[0], reverse=True)
print(data_list1) # [('가렌', 1), ('레오나', 3), ('아무무', 2), ('질리언', 5)]
print(data_list2) # [('질리언', 5), ('아무무', 2), ('레오나', 3), ('가렌', 1)]

# x[1] = 튜플의 두 번째 값을 기준으로 오름차순으로 정렬
data_list3 = sorted([('가렌', 1), ('아무무', 2), ('질리언', 5), ('레오나', 3)], key = lambda x: x[1])
# x[1] = 튜플의 두 번째 값을 기준으로 내림차순으로 정렬
data_list4 = sorted([('가렌', 1), ('아무무', 2), ('질리언', 5), ('레오나', 3)], key = lambda x: x[1], reverse=True)
print(data_list3) # [('가렌', 1), ('아무무', 2), ('레오나', 3), ('질리언', 5)]
print(data_list4) # [('질리언', 5), ('레오나', 3), ('아무무', 2), ('가렌', 1)]